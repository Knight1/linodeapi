#!/bin/bash

set -e
set -u

HELP=0
NODE_NAME=""
NODE_PLAN=""
DATACENTER=0
TOKEN=""
CLOUD_CONFIG_CONTENT=""
LIST_PLANS=0
LIST_DATACENTERS=0
DATA_SIZE="no-data"

# Bash Colors
red=`tput setaf 1`
green=`tput setaf 2`
blue=`tput setaf 4`
yellow=`tput setaf 3`
white=`tput setaf 7`
bold=`tput bold`
reset=`tput sgr0`




#######################################
# Echo/log function
# Arguments:
#   String: value to log
#######################################
log() {
  if [[ "$@" ]]; then echo -e "${bold}${green}[LINODE API `date +'%T'`]${reset} $@";
  else echo; fi
}

#######################################
# Log error. Similar to log(), but red.
# Arguments:
#   String: value to print out as error
#######################################
error() {
  echo -e "${bold}${red}[LINODE API `date +'%T'`]${reset} ${red}$@${reset}";
}

#########################################################
# Verify that command is installed
# Arguments:
#   String: command name
#########################################################
function assert_command_installed() {
  if [ ! $(command -v $1) ]; then
    error "Command *$1* not installed. Please install it." "\n"
    exit 1
  fi
}





# Make sure we have all required command installed
for required_cmd in curl pwgen sshpass sudo jq
do
  assert_command_installed $required_cmd
done

# Check if GitHub and Linod API Keys are installed on your system
if [ "$LINODE_KEY" == "" ]; then
  error "Linode API key environmental variable not set!" "\n" \
    "Please add into your .bashrc file " "\n" "\"export LINODE_KEY=your-Key\"" "\n" \
    "See Linode manual for more info: https://www.linode.com/api"
  exit 1
fi

if [ "$GITHUB_KEY" == "" ]; then
  echo ""
  echo $red"GitHub API key environmental variable not set$reset"
  echo "GitHub Manual: https://help.github.com/articles/creating-an-access-token-for-command-line-use/"
  echo ""
  echo "Add into your .bashrc file "
  echo "\"export GITHUB_KEY=your-Key\""
  echo ""
  exit 1
fi

# Check if API is installed on your machine
if [ ! -f /usr/local/bin/linodeapi ]; then
  echo ""
  echo "Linode API not present in your system"
  echo "Attempting to install Linode API main program"
  curl -s "https://raw.githubusercontent.com/million12/linodeapi/$repo/linodeapi" -o /usr/local/bin/linodeapi
  sudo curl -s "https://raw.githubusercontent.com/million12/linodeapi/$repo/linode_api_macro" -o /etc/linode_api_macro
  chmod +x /usr/local/bin/linodeapi
  echo "Linode API Installed Successfully"
  echo ----------------------------
fi

# Options
# translate long options to short
for i in "$@"
do
  case $i in
    -n=*|--node-name=*)
      NODE_NAME="${i#*=}"
      ;;
    -p=*|--node-plan=*)
      NODE_PLAN="${i#*=}"
      ;;
    -s=*|--data-size=*)
      DATA_SIZE="${i#*=}"
      ;;
    -d=*|--datacenter=*)
      DATACENTER="${i#*=}"
      ;;
    -t=*|--token=*)
      TOKEN="${i#*=}"
      ;;
    -c=*|--cloud-config=*)
      CLOUD_CONFIG_CONTENT="${i#*=}"
      ;;
    -z*|--list-plans*)
      LIST_PLANS=1
      ;;
    -x*|--list-datacenters*)
      LIST_DATACENTERS=1
      ;;
    -h|--help)
      echo -e "
      Linode Bash API CoreOS Deployment Help
      opnions:

      -h|--help (-h)            help
      -n|--node-name (-n)       Node name (required)
      -s|--data-size (-s)       Size of data partition (optional)
      -p|--node-plan (-p)       Node plan (required)
      -d|--datacenter (-d)      Datacenter of your choice (required)
      -t|--token (-t)           ETCD Token

      CoreOS cloud_config:
      --cloud-config (-c)       cloud-config yaml content. Provide using --cloud-config=\"\$(< path/to/your/cloud-config.yaml)\"

      ${yellow}Get Details From Linode API: $reset
      --list-plans (-z)         List linode plans
      --list-datacenters (-x)   List linode datacenters

      For more informations on Linode/Github API keys please go to project page:$blue
      https://github.com/million12/linodeapi$reset" "\n"

      exit 1
      ;;
    *)
      error "Unknown option ${bold}$i${reset}."
      log   "Type ${bold}--help${reset} or ${bold}-h${reset} for all available options."
      exit 1;
      ;;
  esac
done


if [ "$LIST_PLANS" == 1 ]; then
  # Get list of Plans
  mkdir -p $HOME/linode
  allplans=`linodeapi -c avail.linodeplans -d api_responseFormat=json > $HOME/linode/allplans`
  planid=`jq '.DATA[].PLANID' $HOME/linode/allplans | sed 's/^/Planid: /'> $HOME/linode/planid`
  cores=`jq '.DATA[].CORES' $HOME/linode/allplans | sed 's/^/ Cores: /' > $HOME/linode/cores`
  ram=`jq '.DATA[].RAM' $HOME/linode/allplans | sed 's/^/ RAM: /' | sed 's/$/ MB/' > $HOME//linode/ram`
  price=`jq '.DATA[].HOURLY' $HOME/linode/allplans | sed 's/^/ Price: \$/' | sed 's/$/ p\/h/' > $HOME/linode/price`
  paste  $HOME/linode/planid $HOME/linode/cores $HOME/linode/ram $HOME/linode/price
  echo $paste
  rm -rf $HOME/linode/
  exit 1
fi
if [ "$LIST_DATACENTERS" == 1 ]; then
  #Get list of datacenters
  allcenters=`linodeapi -c avail.datacenters | grep 'DATACENTERID\|ABBR' | sed 's/^.*://g' | sed 's/"/ /g' | xargs -n2 echo | sed 's/^/Datacenter ID: /'`
  log "All available Datacenters: "
  echo "$allcenters"
  exit 1
fi
# Check if node name provided by user
if [ -z $NODE_NAME ]; then
  echo ""
  echo -e "No Node$red Name$reset Provided!"
  echo -e "Please provide node name by using$green --node-name$red node-name$reset"
  echo ""
  exit 1
fi
# Check if node plan provided by user
if [ -z $NODE_PLAN ]; then
  echo -e "Node name: $NODE_NAME$green OK$reset\t"
  echo ""
  echo -e "No Node$red Plan$reset Provided!"
  echo -e "Please provide node plan by using$green --node-plan$red ID$reset"
  echo ""
  # Get list of Plans
  mkdir -p $HOME/linode
  allplans=`linodeapi -c avail.linodeplans -d api_responseFormat=json > $HOME/linode/allplans`
  planid=`jq '.DATA[].PLANID' $HOME/linode/allplans | sed 's/^/Planid: /'> $HOME/linode/planid`
  cores=`jq '.DATA[].CORES' $HOME/linode/allplans | sed 's/^/ Cores: /' > $HOME/linode/cores`
  ram=`jq '.DATA[].RAM' $HOME/linode/allplans | sed 's/^/ RAM: /' | sed 's/$/ MB/' > $HOME//linode/ram`
  price=`jq '.DATA[].HOURLY' $HOME/linode/allplans | sed 's/^/ Price: \$/' | sed 's/$/ p\/h/' > $HOME/linode/price`
  paste $HOME/linode/planid $HOME/linode/cores $HOME/linode/ram $HOME/linode/price
  #echo $paste
  rm -rf $HOME/linode/
  exit 1
fi

# Check if datacenter id provided by user
if [ -z $DATACENTER ]; then
  echo ""
  echo -e "No$red Datacenter ID$reset Provided!"
  echo -e "Please provide datacenter id by using$green --datacenter$red ID$reset"
  echo ""
  allcenters=`linodeapi -c avail.datacenters | grep 'DATACENTERID\|ABBR' | sed 's/^.*://g' | sed 's/"/ /g' | xargs -n2 echo | sed 's/^/Datacenter ID: /'`
  echo "All available Datacenters: "
  echo "$allcenters"
  echo ""
  exit 1
fi

if [[ -z $CLOUD_CONFIG_CONTENT ]]; then
  echo -e $red"Empty --cloud-config content! You must provide your cloud config. See '$0 --help' for more info."$reset "\n"
  exit 1
fi


log "Creating node ${bold}${white}$NODE_NAME${reset}" \
 "in data center ${bold}${white}$DATACENTER${reset}," \
 "plan ${bold}${white}$NODE_PLAN${reset}."


# Set Random Password for BootOS Partition.
PASSWD=$(pwgen -c -n -1 16)

# Create WorkDir for the process
mkdir -p $HOME/linode/$NODE_NAME
workdir="$HOME/linode/$NODE_NAME"
echo "$PASSWD" > $workdir/password
# Check if token provided by user. if not generate new one.
if [ -z $TOKEN ]; then
  log "No ETCD token provided. Generating new one..."
  TOKEN=$(curl -s https://discovery.etcd.io/new | sed "s#https://discovery.etcd.io/##")
  log "Generated token: ${bold}${white}$TOKEN${reset}."
fi

# Create node with provided name
linodeapi -c linode.create -d DATACENTERID=$DATACENTER\&PLANID=$NODE_PLAN | grep LinodeID | sed 's/^.*://' > $workdir/nodeid.txt

# Get Linode ID
linodeid=`cat $workdir/nodeid.txt`

# Rename ndoe to user specific
linodeapi -c linode.update -d LINODEID=$linodeid\&LABEL=$NODE_NAME

# Get linode Public IP
linodeapi -c linode.ip.list -d LinodeID=$linodeid | grep IPADDRESS | grep -v IPADDRESSID | sed 's/^.*:"//' | sed 's/"//' > $workdir/publicip.txt
publicip=`cat $workdir/publicip.txt`

#Get Linode Gateway
linodeapi -c linode.ip.list -d LinodeID=$linodeid | grep IPADDRESS | grep -v IPADDRESSID | sed 's|^.*:"||' | sed 's/"//' | sed 's/\./ /g' | awk -v OFS=. '{print $1, $2, $3}' > $workdir/gateway.txt
gateway=`cat $workdir/gateway.txt`

# Add Private network interface
linodeapi -c linode.ip.addprivate -d LINODEID=$linodeid | grep IPADDRESS | grep -v IPADDRESSID | sed 's/^.*:"//' | sed 's/"//' > $workdir/privateip.txt
privateip=`cat $workdir/privateip.txt`

# Get linode disk space
diskspace=`linodeapi -c linode.list -d LinodeID=$linodeid | grep TOTALHD | sed 's/^.*://'`
bootspace=2048
swapspace=2048
coreosspace=$(($diskspace - $bootspace - $swapspace))
if [ "$DATA_SIZE" != "no-data" ]; then
  coreosspace=$(($diskspace - $bootspace - $swapspace - $DATA_SIZE))
fi

# Create BootOS (Debian)
linodeapi -c linode.disk.createfromdistribution -d LinodeID=$linodeid\&DistributionID=130\&Label=BootHD\&Size=$bootspace\&rootPass=$PASSWD

# Create CoreOS Partition
linodeapi -c linode.disk.create -d LinodeID=$linodeid\&Label=CoreOS\&Type=raw\&Size=$coreosspace

# Create Swap Partition
linodeapi -c linode.disk.create -d LinodeID=$linodeid\&Label=SWAP\&Type=swap\&Size=$swapspace

# Create Data Partition if provided space size by user
if [ "$DATA_SIZE" != "no-data" ]; then
  linodeapi -c linode.disk.create -d LinodeID=$linodeid\&Label=Data\&Type=raw\&Size=$DATA_SIZE
    # Get All Disks ID's
  diskids=`linodeapi -c linode.disk.list -d LINODEID=$linodeid | grep DISKID | sed 's/^.*://' | xargs -n 4 echo | sed 's/ /,/g'`
else
    # Get All Disks ID's
  diskids=`linodeapi -c linode.disk.list -d LINODEID=$linodeid | grep DISKID | sed 's/^.*://' | xargs -n 3 echo | sed 's/ /,/g'`
fi

# Create Install Profile for Installation of CoreOS
linodeapi -c linode.config.create -d LINODEID=$linodeid\&Label=Install\&KERNELID=138\&DiskList=$diskids\&RootDeviceNum=1 | grep ConfigID | sed 's/^.*://' > $workdir/install-config-id.txt
instcfg=`cat $workdir/install-config-id.txt`

# Create CoreOS Profile for booting operational version.
linodeapi -c linode.config.create -d LINODEID=$linodeid\&Label=CoreOS\&KERNELID=95\&DiskList=$diskids\&RootDeviceNum=1 | grep ConfigID | sed 's/^.*://' > $workdir/coreos-config-id.txt
coreoscfg=`cat $workdir/coreos-config-id.txt`

## Boot Installation
linodeapi -c linode.boot -d LINODEID=$linodeid\&ConfigID=$instcfg
#Waiting for system to boot
bootstatus=""
while [[ $bootstatus != "ok" ]]; do
  set +e
  log "Waiting for system to boot..."
  sleep 5
  bootstatus=`sshpass -p $PASSWD ssh -o ConnectionAttempts=100 -o ConnectTimeout=5 -o StrictHostKeyChecking=no -l root $publicip echo ok 2>&1`
done
set -e # TODO: wrap it in function and set/unset it there
log "Systm booted. Jumping to next stage"

# Send cloud-config file to server
echo "$CLOUD_CONFIG_CONTENT" | sshpass -p $PASSWD ssh -o StrictHostKeyChecking=no -l root $publicip "cat > /root/cloud-config.yaml; log 'Provided cloud config:' && echo; cat /root/cloud-config.yaml; echo"

# Send CoreOS installation program
sshpass -p $PASSWD ssh -o StrictHostKeyChecking=no -l root $publicip "curl -s https://raw.githubusercontent.com/million12/linodeapi/master/prepare_coreos_boot.sh -o /root/prepare_coreos_boot.sh"
sshpass -p $PASSWD ssh -o StrictHostKeyChecking=no -l root $publicip "chmod +x /root/prepare_coreos_boot.sh"

# Run CoreOS Installation and configuration
sshpass -p $PASSWD ssh -o StrictHostKeyChecking=no -l root $publicip "/root/prepare_coreos_boot.sh $publicip $privateip $gateway $TOKEN"
# Shutdown Boot Install
linodeapi -c linode.shutdown -d LinodeID=$linodeid
# Boot into CoreOS
linodeapi -c linode.boot -d LINODEID=$linodeid\&ConfigID=$coreoscfg

#
# Print summary info
#
log
log "Node ${bold}${white}$NODE_NAME${reset} created and you can now log in."
log "Public IP: ${bold}${white}$publicip${reset}."
log "Log in using, for example:" "\n" \
  "ssh core@$publicip" "\n" \
  "ssh $USER@$publicip"
log
